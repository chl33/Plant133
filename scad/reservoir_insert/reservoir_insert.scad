include <MCAD/units.scad>
include <ProjectBox/rounded_box.scad>

//These are defined in gui.scad, generated by gui.py.
//show_vitamins = false;
//show_vitamins = true;

pump_diameter = 25;
pump_diameter2 = 12.5;
pump_height = 47;

pump_cyl_sep =  [-20,  pump_diameter/2 - pump_diameter2/2, 0];
pump_cyl_sep1 = [-20, -pump_diameter/2 + pump_diameter2/2, 0];
pump_wire_bump_diameter = 5.5;
pump_wire_angle = 320;
pump_wire_offset_d = pump_diameter/4;
pump_wire_offset = [pump_wire_offset_d*cos(pump_wire_angle),
		    pump_wire_offset_d*sin(pump_wire_angle),
		    pump_height-epsilon];

float_height = 67;
float_diameter = 28.5;

rot_pump_sep = 40;
pump_sep = 26;

base_insert_x = 85;


pump_offsets = [0, rot_pump_sep, rot_pump_sep+pump_sep, 2*rot_pump_sep+pump_sep];

pumps_to_insert_x =[0,
		    base_insert_x + pump_offsets[0],
		    base_insert_x + pump_offsets[1] - 10,
		    base_insert_x + pump_offsets[2],
		    base_insert_x + pump_offsets[3] - 10];

insert_x = pumps_to_insert_x[num_pumps];

insert_dims = [insert_x, 30, 58];
vitamin_offset = [insert_x - 50, insert_dims[1]/2, 0];
insert_top_thickness = 2;
insert_leg_radius = 4;

pump_to_float = [pump_diameter/2 + float_diameter/2 + 1, 0, 0];

top_dims = [48, 24, 20];
top_offset = [28, 2, 0];


module VerticalPump() {
  $fn = 80;

  cyl2_height = 26;
  cyl2_diameter = 8;

  color("white") {
    cylinder(pump_height, pump_diameter/2, pump_diameter/2);
    translate(pump_cyl_sep) {
      cylinder(12, pump_diameter2/2, pump_diameter2/2);
      cylinder(cyl2_height, cyl2_diameter/2, cyl2_diameter/2);
    }
    translate(pump_cyl_sep - Y*pump_diameter2/2) {
      cube([-pump_cyl_sep[0], pump_diameter2, 12]);
    }
    translate(pump_wire_offset) {
      cylinder(1, pump_wire_bump_diameter/2, pump_wire_bump_diameter/2);
    }
  }
  translate(pump_wire_offset) {
    color("black") cylinder(30, 1, 1, $fn=10);
  }
}

module Float() {
  $fn = 80;
  stem_diameter = 8;
  screw_height = 23;
  screw_diameter = 10;
  nut_height = 6;
  nut_diameter = 15;
  color("gray") {
    cylinder(float_height, stem_diameter/2, stem_diameter/2);
    // float-end-stop
    translate([0, 0, 1]) cylinder(1, 15/2, 15/2);
    // float
    translate([0, 0, 2]) cylinder(29, float_diameter/2, float_diameter/2);
    // Screw
    translate([0, 0, float_height-screw_height])
      cylinder(screw_height, screw_diameter/2, screw_diameter/2);
    // Nut
    translate([0, 0, float_height-screw_height- 2]) {
      cylinder(nut_height, nut_diameter/2, nut_diameter/2, $fn=6);
      translate([0, 0, nut_height-1]) cylinder(1, nut_diameter/2, nut_diameter/2);
      // Gasket.
      translate([0, 0, nut_height]) cylinder(2, nut_diameter/2-0.5, nut_diameter/2-0.5);
    }
  }
}

module InsertBase(hole=false) {
  diam = 3;
  space = 0.2;
  d = hole ? diam + 2*space : diam;
  module foot() {
    translate([diam/2, diam/2, (-insert_top_thickness)])
      cylinder(insert_top_thickness+top_dims[2], d/2, d/2, $fn=20);
  }
  translate([0, 0, 0]) foot();
  translate([0, top_dims[1]-diam, 0]) foot();
  translate([top_dims[0]-diam, top_dims[1]-d, 0]) foot();
  translate([top_dims[0]-diam, 0, 0]) foot();
}


module InsertTop() {
  d = 3;
  wall = 1;
  InsertBase(hole=false);
  translate(-Z*epsilon) {
    difference() {
      rounded_box(top_dims, d/2);
      translate([wall, wall, -epsilon]) rounded_box(top_dims-wall*[2,2,1], d/2);
      translate([d/2, -1, -1]) cube([top_dims[0]-d, 2+wall, top_dims[2]-wall]);
    }
  }
}

module InsertLid() {
  res_width = 2;
  res_corner = 5;

  top_dims = [insert_dims[0], insert_dims[1], insert_top_thickness];

  uc1 = top_dims + res_corner * [1, 1, 0];
  uc2 = uc1 + res_width * [2, 2, 0];
  d = top_dims[2];
  chomp_len = res_corner+res_width;

  difference() {
    translate([0, -res_corner, 0]) union() {
      rounded_box(uc1, res_corner);
      translate([-res_width, -res_width, d-epsilon]) rounded_box(uc2, res_corner);
    }
    translate([uc1[0]-res_corner, -chomp_len-1, -1]) cube([chomp_len+2, uc2[1]+5, 10]);
    translate([-res_width-1, -chomp_len-epsilon, -1]) cube([uc2[0]+2, chomp_len, 10]);
  }
}

module Insert() {
  if (show_vitamins) {
    translate(vitamin_offset) {
      translate(pump_to_float) Float();
      for (i = [0:num_pumps-1])
	translate([-pump_offsets[i],0,0]) rotate([0, 0, i*180]) VerticalPump();
    }
  }

  $fn = 80;

  sleeve_height = 18;
  sleeve_space = 0;
  wall = 2;

  tube_width = 8;
  tube_gap = 0.5;

  float_top_diam = 11;

  module leg() {
    cylinder(insert_dims[2], insert_leg_radius, insert_leg_radius);
  }
  if (show_insert) {
    translate([insert_leg_radius, insert_leg_radius, 0]) leg();
    translate([insert_dims[0]-insert_leg_radius, insert_leg_radius, 0]) leg();
    translate([insert_leg_radius, insert_dims[1]-insert_leg_radius, 0]) leg();
    translate([insert_dims[0]-insert_leg_radius, insert_dims[1]-insert_leg_radius, 0]) leg();
    translate([0, 0, insert_dims[2] - insert_top_thickness * 2]) {
      difference() {
	union() {
	  InsertLid();
	  //rounded_box([insert_dims[0], insert_dims[1], insert_top_thickness], insert_leg_radius);
	  // pump sleeve
	  for (i = [0:num_pumps-1]) {
	    translate([-pump_offsets[i],0,0]) {
	      translate(vitamin_offset - Z*sleeve_height) {
		cylinder(sleeve_height + insert_top_thickness,
			 (pump_diameter+sleeve_space)/2+wall, (pump_diameter+sleeve_space)/2+wall);
	      }
	    }
	  }
	}
	// Hole for float top screw.
	translate(vitamin_offset + pump_to_float - Z*1) {
	  cylinder(5 + insert_top_thickness, float_top_diam/2, float_top_diam/2);
	}
	translate([vitamin_offset[0] + pump_to_float[0] - float_top_diam/2,
		   -1 - vitamin_offset[1], -1]) {
	  cube([float_top_diam, insert_dims[1], 5]);
	}
	for (i = [0:num_pumps-1]) {
	  translate([-pump_offsets[i],0,0]) {
	    // pump_sleeve
	    translate(vitamin_offset - Z*(1+sleeve_height)) {
	      cylinder(1 + sleeve_height,
		       (pump_diameter+sleeve_space)/2, (pump_diameter+sleeve_space)/2);
	    }
	    wire_angle = pump_wire_angle + 180 * i;
	    wire_xy = [pump_wire_offset_d*cos(wire_angle),
		       pump_wire_offset_d*sin(wire_angle)];
	    // pump wire hole
	    translate([vitamin_offset[0]+wire_xy[0], vitamin_offset[1]+wire_xy[1], -epsilon])
	      cylinder(10, 4, 4); // big hole because wire location is variable.
	    // pump wire slot
	    slot_width = 4;
	    translate([vitamin_offset[0]+wire_xy[0]-slot_width/2, -1, -50])
	      cube([slot_width, vitamin_offset[1]+wire_xy[1]+1, 60]);
	    // tube hole
	    if (0 == (i%2)) {
	      translate(vitamin_offset + pump_cyl_sep - Z*1)
		cylinder(5 + insert_top_thickness, tube_width/2+tube_gap, tube_width/2+tube_gap);
	      if (i+1 < num_pumps) {
		translate(vitamin_offset + pump_cyl_sep1 - Z*1)
		  cylinder(5 + insert_top_thickness, tube_width/2+tube_gap, tube_width/2+tube_gap);
	      }
	    }
	  }
	}

	if (false) {
	  // Holes for the InsertTop
	  translate(top_offset + Z * (insert_top_thickness - epsilon)) InsertBase(hole=true);
	}
      }
    }
  }
}
